"""
Admin-–ø–∞–Ω–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –±–æ—Ç–∞ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ (–±–µ–∑ –∑–º—ñ–Ω–∏ –±–æ—Ç–∞)
‚Äî –ü—Ä–∞—Ü—é—î –Ω–∞–ø—Ä—è–º—É –∑ –≤–∞—à–∏–º data.json (—Ç–æ–π —Å–∞–º–∏–π, —â–æ —á–∏—Ç–∞—î –±–æ—Ç)
‚Äî –¢–∞–±–ª–∏—Ü—ñ: –£—á–Ω—ñ (students), –ê–¥–º—ñ–Ω–∏ (admins), –ü—Ä–∏–≤ º—è–∑–∫–∏ (tg_links, read-only)
‚Äî –ú–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏/—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏/–≤–∏–¥–∞–ª—è—Ç–∏ —É—á–Ω—ñ–≤, –º–∞—Å–æ–≤–æ –º—ñ–Ω—è—Ç–∏ –±–∞–ª–∏, PIN, –∫–ª–∞—Å, –≤—ñ–∫ —Ç–æ—â–æ
‚Äî –ö–Ω–æ–ø–∫–∞ –ó–±–µ—Ä–µ–≥—Ç–∏ ‚Üí –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î data.json (—Ä–æ–±–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é)
‚Äî ‚úâÔ∏è –ù–æ–≤–µ: —Ä–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ¬´—É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞¬ª (—É—Å—ñ chat_id –∑ tg_links)

–Ø–∫ –∑–∞–ø—É—Å—Ç–∏—Ç–∏:
1) pip install streamlit pandas requests
2) streamlit run admin_app.py
3) –£ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ –≤–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ data.json (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ./data.json)

–ü–æ—Ä–∞–¥–∞: –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –Ω–∞ —Ç–æ–º—É –∂ –∫–æ–º–ø º—é—Ç–µ—Ä—ñ, –¥–µ –ª–µ–∂–∏—Ç—å data.json. –ë–æ—Ç –Ω–µ —Ç—Ä–µ–±–∞ –∑—É–ø–∏–Ω—è—Ç–∏ ‚Äî –≤—ñ–Ω —á–∏—Ç–∞—î —Ñ–∞–π–ª –ø—ñ–¥ —á–∞—Å –∫–æ–º–∞–Ω–¥.
"""

import json
from pathlib import Path
from datetime import datetime
import pandas as pd
import streamlit as st
import requests

st.set_page_config(page_title="School Bot Admin", page_icon="üìö", layout="wide")
st.title("üìö School Bot ‚Äî Admin –ø–∞–Ω–µ–ª—å")

# -------------------- –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É --------------------
def default_path():
    p = Path("data.json")
    return str(p.resolve())

path_str = st.text_input("–®–ª—è—Ö –¥–æ data.json", value=default_path(), help="–í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤–∞—à –±–æ—Ç")
path = Path(path_str)

if not path.exists():
    st.warning("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é, —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω–µ—Ç–µ '–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π data.json'.")
    if st.button("–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π data.json"):
        empty = {"students": {}, "tg_links": {}, "admins": []}
        path.write_text(json.dumps(empty, ensure_ascii=False, indent=2), encoding="utf-8")
        st.success("–°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π data.json")

# -------------------- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è --------------------
@st.cache_data(ttl=2)
def load_db(_path: Path):
    try:
        data = json.loads(_path.read_text(encoding="utf-8"))
    except Exception:
        data = {"students": {}, "tg_links": {}, "admins": []}
    # –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤
    data.setdefault("students", {})
    data.setdefault("tg_links", {})
    data.setdefault("admins", [])
    return data


def save_db(_path: Path, data: dict):
    # —Ä–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è
    ts = datetime.now().strftime("%Y%m%d-%H%M%S")
    backup = _path.with_name(f"{_path.stem}.backup-{ts}.json")
    try:
        backup.write_text(json.dumps(load_db(_path), ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception:
        pass
    # –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    _path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")


data = load_db(path)

# -------------------- –¢–∞–±: –£—á–Ω—ñ --------------------
st.header("üë• –£—á–Ω—ñ (students)")
st.caption("–î–æ–¥–∞–≤–∞–π—Ç–µ/—Ä–µ–¥–∞–≥—É–π—Ç–µ —É—á–Ω—ñ–≤. –ü–æ–ª—è: id, full_name, pin, class, age, year, points")

# –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ students —É DataFrame
students_dict = data.get("students", {})
rows = []
for sid, s in students_dict.items():
    row = {
        "id": str(s.get("id", sid)),
        "full_name": s.get("full_name", ""),
        "pin": str(s.get("pin", "")),
        "class": s.get("class", ""),
        "age": int(s.get("age", 0)) if str(s.get("age", "0")).isdigit() else 0,
        "year": int(s.get("year", 0)) if str(s.get("year", "0")).isdigit() else 0,
        "points": int(s.get("points", 0)) if str(s.get("points", "0")).lstrip("-").isdigit() else 0,
    }
    rows.append(row)

students_df = pd.DataFrame(rows, columns=["id", "full_name", "pin", "class", "age", "year", "points"]).sort_values("id")

edited_df = st.data_editor(
    students_df,
    use_container_width=True,
    num_rows="dynamic",
    column_config={
        "id": st.column_config.TextColumn("ID", help="–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É—á–Ω—è"),
        "full_name": st.column_config.TextColumn("–ü–Ü–ë"),
        "pin": st.column_config.TextColumn("PIN"),
        "class": st.column_config.TextColumn("–ö–ª–∞—Å"),
        "age": st.column_config.NumberColumn("–í—ñ–∫", min_value=0, max_value=100),
        "year": st.column_config.NumberColumn("–†—ñ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è", min_value=0, max_value=12),
        "points": st.column_config.NumberColumn("–ë–∞–ª–∏", min_value=-100000, max_value=100000),
    },
    hide_index=True,
)

col1, col2 = st.columns([1,1])
with col1:
    if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —É—á–Ω—ñ–≤ —É data.json", type="primary"):
        # –≤–∞–ª—ñ–¥–∞—Ü—ñ—è ID
        ids = list(edited_df["id"].astype(str))
        if len(ids) != len(set(ids)):
            st.error("ID –º–∞—é—Ç—å –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥—É–±–ª—ñ–∫–∞—Ç–∏.")
        else:
            # –∑–±–∏—Ä–∞—î–º–æ –Ω–∞–∑–∞–¥ —É dict
            new_students = {}
            for _, r in edited_df.iterrows():
                sid = str(r["id"]) or ""
                if not sid:
                    continue
                new_students[sid] = {
                    "id": sid,
                    "full_name": str(r["full_name"] or "").strip(),
                    "pin": str(r["pin"] or "").strip(),
                    "class": str(r["class"] or "").strip(),
                    "age": int(r["age"]) if pd.notna(r["age"]) else 0,
                    "year": int(r["year"]) if pd.notna(r["year"]) else 0,
                    "points": int(r["points"]) if pd.notna(r["points"]) else 0,
                }
            data["students"] = new_students
            save_db(path, data)
            st.success("–ó–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ")

with col2:
    st.download_button(
        "‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ data.json",
        data=json.dumps(data, ensure_ascii=False, indent=2).encode("utf-8"),
        file_name="data.json",
        mime="application/json",
    )

# -------------------- –¢–∞–±: –õ—ñ–Ω–∫–∏ —ñ –∞–¥–º—ñ–Ω–∏ --------------------
st.header("üîó –ü—Ä–∏–≤ º—è–∑–∫–∏ (tg_links) —Ç–∞ üëë –ê–¥–º—ñ–Ω–∏")

colA, colB = st.columns(2)
with colA:
    st.subheader("üîó tg_links (read‚Äëonly)")
    if data.get("tg_links"):
        tl_df = pd.DataFrame(
            sorted([{"telegram_user_id": k, "student_id": v} for k, v in data.get("tg_links", {}).items()], key=lambda x: x["student_id"])
        )
    else:
        tl_df = pd.DataFrame(columns=["telegram_user_id", "student_id"])
    st.dataframe(tl_df, use_container_width=True)

with colB:
    st.subheader("üëë admins")
    admins_list = data.get("admins", [])
    admins_text = st.text_area("–°–ø–∏—Å–æ–∫ admin user_id (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥–∫—É)", value="".join(map(str, admins_list)))
    if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"):
        new_list = [x.strip() for x in admins_text.splitlines() if x.strip()]
        data["admins"] = new_list
        save_db(path, data)
        st.success("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ")

st.caption("–ü—ñ–¥–∫–∞–∑–∫–∞: tg_user_id –∑ º—è–≤–ª—è—î—Ç—å—Å—è –≤ tg_links –ø—ñ—Å–ª—è /link –≤—ñ–¥ —É—á–Ω—è (–∞–±–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É).")

# -------------------- ‚úâÔ∏è –†–æ–∑—Å–∏–ª–∫–∞ –≤ Telegram (—É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º) --------------------
st.header("‚úâÔ∏è –†–æ–∑—Å–∏–ª–∫–∞ –≤ Telegram ‚Äî —É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞")
with st.expander("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º, —Ö—Ç–æ –ø—Ä–∏–≤ º—è–∑–∞–≤—Å—è (—É—Å—ñ chat_id –∑ tg_links)", expanded=True):
    token = st.text_input("BOT_TOKEN –≤—ñ–¥ @BotFather", type="password", help="–¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞. –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –π–æ–≥–æ –≤ —Å–µ–∫—Ä–µ—Ç—ñ.")
    msg = st.text_area("–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö‚Ä¶")
    disable_notif = st.checkbox("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ –∑–≤—É–∫—É (disable_notification)", value=False)

    if st.button("üöÄ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º"):
        if not token:
            st.error("–í–∫–∞–∂—ñ—Ç—å BOT_TOKEN.")
        elif not msg.strip():
            st.error("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        else:
            tg_ids = list(data.get("tg_links", {}).keys())
            if not tg_ids:
                st.warning("tg_links –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –Ω–µ–º–∞—î –∫–æ–º—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏.")
            else:
                sent = 0
                failed = 0
                for chat_id in tg_ids:
                    try:
                        resp = requests.post(
                            f"https://api.telegram.org/bot{token}/sendMessage",
                            json={
                                "chat_id": int(chat_id),
                                "text": msg,
                                "disable_notification": disable_notif,
                            },
                            timeout=15,
                        )
                        if resp.status_code == 200:
                            sent += 1
                        else:
                            failed += 1
                    except Exception:
                        failed += 1
                st.success(f"–ì–æ—Ç–æ–≤–æ: –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {sent}, –ø–æ–º–∏–ª–æ–∫ {failed} ‚úÖ")
                if failed:
                    st.info("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É —Ö–æ—á–∞ –± 1 —Ä–∞–∑ —ñ –Ω–µ –±–ª–æ–∫—É–≤–∞–ª–∏ –±–æ—Ç–∞.")

st.caption("¬© School Bot Admin ‚Ä¢ Streamlit ‚Ä¢ –ü—Ä–∞—Ü—é—î –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º JSON —ñ API Telegram")

# –ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ –¥–æ –ø–∞–ø–∫–∏ admin
