"""
–ë–æ—Ç –¥–ª—è —à–∫–æ–ª–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏, –ª—ñ–¥–µ—Ä–∞–º–∏, –ø—Ä–æ—Ñ—ñ–ª–µ–º —ñ –∞–¥–º—ñ–Ω‚Äë—Ä–µ–∂–∏–º–æ–º
- –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É—á–Ω—ñ–≤: –ú–æ—ó –±–∞–ª–∏, –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å, –†–æ–∑–∫–ª–∞–¥, –ü—Ä–∞–≤–∏–ª–∞, –õ—ñ–¥–µ—Ä–∏ (–∫–ª–∞—Å), –õ—ñ–¥–µ—Ä–∏ (–≤—Å—ñ)
- /link <PIN> ‚Äî –ø—Ä–∏–≤ º—è–∑–∫–∞ Telegram ‚Üí —É—á–µ–Ω—å
- –õ—ñ–¥–µ—Ä–±–æ—Ä–¥ –ø–æ –∫–ª–∞—Å—É –∞–±–æ –ø–æ –≤—Å—ñ—Ö
- –ü—Ä–æ—Ñ—ñ–ª—å –ø–æ–∫–∞–∑—É—î: —ñ–º º—è, –∫–ª–∞—Å, –≤—ñ–∫, —Ä—ñ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è, –±–∞–ª–∏
- –°–µ–∫—Ä–µ—Ç–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin <–ø–∞—Ä–æ–ª—å> –¥–æ–¥–∞—î –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ —É admins —É data.json
- –ê–¥–º—ñ–Ω‚Äë–∫–æ–º–∞–Ω–¥–∏: /set, /give, /add_student, /edit_student, /del_student, /broadcast
- –î–∞–Ω—ñ —É data.json (students, tg_links, admins)

–í–∏–º–æ–≥–∏: python-telegram-bot==20.*
"""

import json
from pathlib import Path
from typing import Dict, Any
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ==================
BOT_TOKEN = "7811760305:AAHtfRGM20Q9btxdWlmTBcdhJ2SrUZu5YjE"  # ‚Üê –í–°–¢–ê–í –°–í–Ü–ô –¢–û–ö–ï–ù
DATA_FILE = Path("data.json")
ADMIN_SECRET = "secret123"  # ‚Üê –ó–ú–Ü–ù–ò –ù–ê –°–í–Ü–ô –ü–ê–†–û–õ–¨

RULES_TEXT = (
    "üìã –ü—Ä–∞–≤–∏–ª–∞ –±–∞–ª—ñ–≤:\n"
    "‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏–≤ –¥—Ä—É–≥–∞, —è–∫–∏–π –∑–∞–ø–∏—Å–∞–≤—Å—è ‚Äî +10\n"
    "‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å/–≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è ‚Äî +20\n"
    "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—ñ ‚Äî +10\n"
    "‚Ä¢ –ü–æ—Ä—É—à–µ–Ω–Ω—è ‚Äî ‚àí10/‚àí15\n"
    "(–¥–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è —É –∫–ª–∞—Å–Ω–æ–≥–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞)"
)

SCHEDULE_TEXT = (
    "üóì –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –º—ñ—Å—è—Ü—å:\n"
    "–ü–Ω 18:00 ‚Äî –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞\n–í—Ç 18:00 ‚Äî –Ü—Å—Ç–æ—Ä—ñ—è\n–ß—Ç 18:00 ‚Äî –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞\n–°–± 11:00 ‚Äî –†–æ–∑–º–æ–≤–Ω–∏–π –∫–ª—É–±\n"
    "(–∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –æ–Ω–æ–≤–ª—é–π—Ç–µ —Ü–µ–π —Ç–µ–∫—Å—Ç —É –∫–æ–¥—ñ)"
)

START_STUDENTS = [
    {"id": "1", "full_name": "–ë–æ–≥–¥–∞–Ω –ö–æ–∫—É—à–∫–æ", "pin": "1111", "points": 25, "class": "7-–ê", "age": 13, "year": 2},
    {"id": "2", "full_name": "–î–∞–Ω–∏–ª–æ –®—É—Ç—è–∫", "pin": "2222", "points": 40, "class": "7-–ê", "age": 13, "year": 2},
    {"id": "3", "full_name": "–ó–∞—Ö–∞—Ä –î—ñ–¥—É–Ω", "pin": "3333", "points": 15, "class": "7-–ë", "age": 13, "year": 2},
]

# ================== –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• ==================

def load_db() -> Dict[str, Any]:
    if DATA_FILE.exists():
        return json.loads(DATA_FILE.read_text(encoding="utf-8"))
    db = {
        "students": {s["id"]: s for s in START_STUDENTS},
        "tg_links": {},  # telegram_user_id -> student_id
        "admins": [],
    }
    save_db(db)
    return db


def save_db(db: Dict[str, Any]):
    DATA_FILE.write_text(json.dumps(db, ensure_ascii=False, indent=2), encoding="utf-8")


# ================== –ö–û–†–ò–°–ù–Ü –§–£–ù–ö–¶–Ü–á ==================

def is_admin(db: Dict[str, Any], user_id: int) -> bool:
    return str(user_id) in {str(a) for a in db.get("admins", [])}


def get_linked_student(db: Dict[str, Any], user_id: int) -> Dict[str, Any] | None:
    sid = db["tg_links"].get(str(user_id))
    if not sid:
        return None
    return db["students"].get(str(sid))


def main_keyboard(is_admin_flag: bool = False) -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton("üìä –ú–æ—ó –±–∞–ª–∏"), KeyboardButton("üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
        [KeyboardButton("üóì –†–æ–∑–∫–ª–∞–¥"), KeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton("üèÜ –õ—ñ–¥–µ—Ä–∏ (–∫–ª–∞—Å)"), KeyboardButton("üåç –õ—ñ–¥–µ—Ä–∏ (–≤—Å—ñ)")],
    ]
    if is_admin_flag:
        rows.append([KeyboardButton("üõ† –ê–¥–º—ñ–Ω –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


# ================== –•–ï–ù–î–õ–ï–†–ò –ö–û–ú–ê–ù–î ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    admin_flag = is_admin(db, update.effective_user.id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π —à–∫—ñ–ª—å–Ω–∏–π –±–æ—Ç üëã –û–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.\n"
        "–©–æ–± –ø—ñ–¥‚Äô—î–¥–Ω–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å, –≤–≤–µ–¥–∏: /link PIN (PIN –¥–∞—Å—Ç—å –≤—á–∏—Ç–µ–ª—å).\n",
        reply_markup=main_keyboard(admin_flag)
    )


async def link_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if not context.args:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å PIN: /link 1234")
        return
    pin = context.args[0]
    for sid, s in db["students"].items():
        if str(s.get("pin")) == str(pin):
            db["tg_links"][str(update.effective_user.id)] = sid
            save_db(db)
            await update.message.reply_text(f"–ü—Ä–∏–≤ º—è–∑–∞–Ω–æ –¥–æ: {s['full_name']}", reply_markup=main_keyboard(is_admin(db, update.effective_user.id)))
            return
    await update.message.reply_text("PIN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É –≤—á–∏—Ç–µ–ª—è.")


async def admin_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if not context.args:
        await update.message.reply_text("–ü–∞—Ä–æ–ª—å?: /admin <–ø–∞—Ä–æ–ª—å>")
        return
    if context.args[0] == ADMIN_SECRET:
        admins = set(str(x) for x in db.get("admins", []))
        admins.add(str(update.effective_user.id))
        db["admins"] = list(admins)
        save_db(db)
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ê–¥–º—ñ–Ω‚Äë—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.", reply_markup=main_keyboard(True))
    else:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å.")


async def me_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    s = get_linked_student(db, update.effective_user.id)
    if not s:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É /link <PIN>.")
        return
    await update.message.reply_text(f"{s['full_name']}, –≤–∞—à—ñ –±–∞–ª–∏: {s['points']} ‚ú®")


async def profile_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    s = get_linked_student(db, update.effective_user.id)
    if not s:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É /link <PIN>.")
        return
    txt = (
        f"üë§ {s['full_name']}\n"
        f"–ö–ª–∞—Å: {s.get('class','-')}\n"
        f"–í—ñ–∫: {s.get('age','-')}\n"
        f"–†—ñ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è: {s.get('year','-')}\n"
        f"–ë–∞–ª–∏: {s['points']}"
        f"–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ! üéâ"
    )
    await update.message.reply_text(txt)


async def rules_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT)


async def schedule_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(SCHEDULE_TEXT)


def _leaderboard_text(db: Dict[str, Any], *, class_filter: str | None = None, top: int = 10) -> str:
    # –∑–±–∏—Ä–∞—î–º–æ (student, points) –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –∑–∞ –∫–ª–∞—Å–æ–º
    rows = []
    for s in db["students"].values():
        if class_filter and str(s.get("class")) != str(class_filter):
            continue
        rows.append((s.get("full_name"), int(s.get("points", 0)), s.get("class")))
    if not rows:
        return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö."
    rows.sort(key=lambda x: x[1], reverse=True)
    lines = [f"üèÜ –õ—ñ–¥–µ—Ä–∏{' ‚Äî ' + class_filter if class_filter else ''}:"]
    for i, (name, pts, cls) in enumerate(rows[:top], start=1):
        lines.append(f"{i}. {name} ‚Äî {pts} –±–∞–ª—ñ–≤ ({cls})")
    return "\n".join(lines)


async def leaderboard_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    await update.message.reply_text(_leaderboard_text(db))


async def leaderboard_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    s = get_linked_student(db, update.effective_user.id)
    if not s:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É /link <PIN>.")
        return
    cls = s.get("class")
    await update.message.reply_text(_leaderboard_text(db, class_filter=str(cls)))


# ================== –ê–î–ú–Ü–ù –ö–û–ú–ê–ù–î–ò ==================
async def set_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if not is_admin(db, update.effective_user.id):
        return
    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /set <student_id> <points>")
        return
    sid, pts = context.args[0], int(context.args[1])
    if sid not in db["students"]:
        await update.message.reply_text("–£—á–Ω—è –∑ —Ç–∞–∫–∏–º ID –Ω–µ–º–∞—î.")
        return
    db["students"][sid]["points"] = pts
    save_db(db)
    await update.message.reply_text("–û–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")


async def give_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if not is_admin(db, update.effective_user.id):
        return
    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /give <student_id> <delta>")
        return
    sid, delta = context.args[0], int(context.args[1])
    if sid not in db["students"]:
        await update.message.reply_text("–£—á–Ω—è –∑ —Ç–∞–∫–∏–º ID –Ω–µ–º–∞—î.")
        return
    db["students"][sid]["points"] = int(db["students"][sid].get("points", 0)) + delta
    save_db(db)
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ ‚úÖ")


async def add_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if not is_admin(db, update.effective_user.id):
        return
    # –§–æ—Ä–º–∞—Ç: /add_student id|full_name|pin|class|age|year|points
    raw = " ".join(context.args)
    if "|" not in raw:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_student id|full_name|pin|class|age|year|points")
        return
    parts = [p.strip() for p in raw.split("|")]
    if len(parts) < 7:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –Ω–µ–ø–æ–≤–Ω–∏–π. –ü–æ—Ç—Ä—ñ–±–Ω–æ 7 –ø–æ–ª—ñ–≤.")
        return
    sid, full_name, pin, cls, age, year, pts = parts
    db["students"][sid] = {
        "id": sid,
        "full_name": full_name,
        "pin": pin,
        "class": cls,
        "age": int(age),
        "year": int(year),
        "points": int(pts),
    }
    save_db(db)
    await update.message.reply_text("–£—á–Ω—è –¥–æ–¥–∞–Ω–æ ‚úÖ")


async def edit_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if not is_admin(db, update.effective_user.id):
        return
    # –§–æ—Ä–º–∞—Ç: /edit_student <id> <field> <value>
    if len(context.args) < 3:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /edit_student <id> <field> <value>")
        return
    sid, field, value = context.args[0], context.args[1], " ".join(context.args[2:])
    if sid not in db["students"]:
        await update.message.reply_text("–£—á–Ω—è –∑ —Ç–∞–∫–∏–º ID –Ω–µ–º–∞—î.")
        return
    if field not in {"full_name", "pin", "class", "age", "year", "points"}:
        await update.message.reply_text("–î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–æ–ª—è: full_name, pin, class, age, year, points")
        return
    if field in {"age", "year", "points"}:
        value = int(value)
    db["students"][sid][field] = value
    save_db(db)
    await update.message.reply_text("–û–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")


async def del_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if not is_admin(db, update.effective_user.id):
        return
    if len(context.args) < 1:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /del_student <id>")
        return
    sid = context.args[0]
    if sid not in db["students"]:
        await update.message.reply_text("–£—á–Ω—è –∑ —Ç–∞–∫–∏–º ID –Ω–µ–º–∞—î.")
        return
    db["students"].pop(sid)
    # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è tg_links
    for k, v in list(db["tg_links"].items()):
        if v == sid:
            db["tg_links"].pop(k)
    save_db(db)
    await update.message.reply_text("–í–∏–¥–∞–ª–µ–Ω–æ ‚úÖ")


async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if not is_admin(db, update.effective_user.id):
        return
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /broadcast <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>")
        return
    msg = " ".join(context.args)
    # –†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º, —Ö—Ç–æ –ø—Ä–∏–≤ º—è–∑–∞–Ω–∏–π
    sent = 0
    for tg_user_id in db["tg_links"].keys():
        try:
            await context.bot.send_message(chat_id=int(tg_user_id), text=msg)
            sent += 1
        except Exception:
            pass
    await update.message.reply_text(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {sent}")


# ================== –û–ë–†–û–ë–ö–ê –ö–ù–û–ü–û–ö (–¢–ï–ö–°–¢) ==================
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == "üìä –ú–æ—ó –±–∞–ª–∏":
        return await me_cmd(update, context)
    if text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
        return await profile_cmd(update, context)
    if text == "üóì –†–æ–∑–∫–ª–∞–¥":
        return await schedule_cmd(update, context)
    if text == "üìã –ü—Ä–∞–≤–∏–ª–∞":
        return await rules_cmd(update, context)
    if text == "üèÜ –õ—ñ–¥–µ—Ä–∏ (–∫–ª–∞—Å)":
        return await leaderboard_class(update, context)
    if text == "üåç –õ—ñ–¥–µ—Ä–∏ (–≤—Å—ñ)":
        return await leaderboard_all(update, context)
    if text == "üõ† –ê–¥–º—ñ–Ω –º–µ–Ω—é":
        await update.message.reply_text(
            "–ê–¥–º—ñ–Ω‚Äë–∫–æ–º–∞–Ω–¥–∏:\n"
            "‚Ä¢ /set <id> <points>\n"
            "‚Ä¢ /give <id> <delta>\n"
            "‚Ä¢ /add_student id|full_name|pin|class|age|year|points\n"
            "‚Ä¢ /edit_student <id> <field> <value>\n"
            "‚Ä¢ /del_student <id>\n"
            "‚Ä¢ /broadcast <—Ç–µ–∫—Å—Ç>"
        )
        return


# ================== MAIN ==================
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "/link <PIN> ‚Äî –ø—Ä–∏–≤ º—è–∑–∫–∞\n"
        "/me ‚Äî –º–æ—ó –±–∞–ª–∏\n"
        "/rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞\n"
        "/schedule ‚Äî —Ä–æ–∑–∫–ª–∞–¥\n"
        "/leaderboard ‚Äî –ª—ñ–¥–µ—Ä–∏ (–≤—Å—ñ)\n"
        "/leaderboard_class ‚Äî –ª—ñ–¥–µ—Ä–∏ –ø–æ –º–æ—î–º—É –∫–ª–∞—Å—É\n"
        "/admin <–ø–∞—Ä–æ–ª—å> ‚Äî —Å—Ç–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    )


def build_app() -> Application:
    app = Application.builder().token(BOT_TOKEN).build()
    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("link", link_cmd))
    app.add_handler(CommandHandler("admin", admin_cmd))
    app.add_handler(CommandHandler("me", me_cmd))
    app.add_handler(CommandHandler("rules", rules_cmd))
    app.add_handler(CommandHandler("schedule", schedule_cmd))
    app.add_handler(CommandHandler("leaderboard", leaderboard_all))
    app.add_handler(CommandHandler("leaderboard_class", leaderboard_class))
    # –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("set", set_points))
    app.add_handler(CommandHandler("give", give_points))
    app.add_handler(CommandHandler("add_student", add_student))
    app.add_handler(CommandHandler("edit_student", edit_student))
    app.add_handler(CommandHandler("del_student", del_student))
    app.add_handler(CommandHandler("broadcast", broadcast))
    # –ö–Ω–æ–ø–∫–∏ (—Ç–µ–∫—Å—Ç)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    return app


def main():
    app = build_app()
    app.run_polling()


if __name__ == "__main__":
    main()
